// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.md" // mermaid形式
  //output   = "./erd.svg" // svg形式（エラー出るので不可）
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"] // lambda用にrhelを追加
}

datasource db {
  provider = "sqlite"
  //url      = env("DATABASE_URL")
  url      = "file:./dev.db?connection_limit=1"
}

model TUser {
  userId        String   @id @map("user_id")
  userName      String   @map("user_name")
  userRoleId    String   @map("user_role_id")
  userCreatedAt DateTime @default(now()) @map("user_created_at")
  userUpdatedAt DateTime @default(now()) @map("user_updated_at")

  mUserRole MUserRole @relation(fields: [userRoleId], references: [userRoleId])

  tUserUserTagMap TUserUserTagMap[]
  tChatMessage    TChatMessage[]

  @@map("t_user")
}

model MUserRole {
  userRoleId   String @id @map("user_role_id")
  userRoleName String @map("user_role_name")

  tUser TUser[]

  @@map("m_user_role")
}

model TUserTag {
  userTagId        String   @id @map("user_tag_id") @default(cuid())
  userTagName      String   @map("user_tag_name")
  userTagCreatedAt DateTime @default(now()) @map("user_tag_created_at")
  userTagUpdatedAt DateTime @default(now()) @map("user_tag_updated_at")

  tUserUserTagMap TUserUserTagMap[]

  @@map("t_user_tag")
}

model TUserUserTagMap {
  userId                  String   @map("user_id")
  userTagId               String   @map("user_tag_id")
  userUserTagMapCreatedAt DateTime @default(now()) @map("user_user_tag_map_created_at")

  tUser    TUser    @relation(fields: [userId], references: [userId])
  tUserTag TUserTag @relation(fields: [userTagId], references: [userTagId])

  @@id([userId, userTagId])
  @@map("t_user_user_tag_map")
}

model TChat {
  chatId        String   @id @default(cuid()) @map("chat_id")
  chatTitle     String   @map("chat_title")
  chatCreatedAt DateTime @default(now()) @map("chat_created_at")
  chatUpdatedAt DateTime @default(now()) @map("chat_updated_at")

  tChatMessage TChatMessage[]

  @@map("t_chat")
}

model TChatMessage {
  chatMessageId        String   @id @default(cuid()) @map("chat_message_id")
  chatMessageContext   String   @map("chat_message")
  chatMessageCreatedAt DateTime @default(now()) @map("chat_message_created_at")
  chatMessageUpdatedAt DateTime @default(now()) @map("chat_message_updated_at")
  userId               String   @map("user_id")
  chatId               String   @map("chat_id")

  tUser TUser @relation(fields: [userId], references: [userId])
  tChat TChat @relation(fields: [chatId], references: [chatId])

  @@map("t_chat_message")
}

model Actor {
  actorId String @id

  film Film[]
}

model Film {
  filmId  String @id
  actorId String

  actor Actor @relation(fields: [actorId], references: [actorId])
}
